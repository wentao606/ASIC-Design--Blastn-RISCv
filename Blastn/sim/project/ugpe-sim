#!/usr/bin/env python
#=========================================================================
# ugpe-sim
#=========================================================================
#
#  -h --help           Display this message
#
#  --impl              {fl,rtl}
#  --input dataset     {basic, random}
#  --trace             Display line tracing
#  --stats             Display statistics
#  --dump-vcd          Dump VCD to imul-<impl>-<input>.vcd
#  --dump-vtb          Dump a Verilog test harness
#
# Author : Christopher Batten, Shunning Jiang
# Date   : February 5, 2015
#

# Hack to add project root to python path
import os
import sys 
import argparse
import re

sim_dir = os.path.dirname( os.path.abspath( __file__ ) )
while sim_dir:
  if os.path.exists( sim_dir + os.path.sep + "pymtl.ini" ):
    sys.path.insert(0,sim_dir)
    break
  sim_dir = os.path.dirname(sim_dir)

from random import randint, seed

seed(0xdeadbeef)

from pymtl3 import *
from pymtl3.stdlib.test_utils import config_model_with_cmdline_opts
from pymtl3.passes.backends.verilog import VerilogPlaceholderPass

from project.UGPEFL     import UGPEFL
from project.UGPE      import UGPE

from project.test.UGPEFL_test import TestHarness

#-------------------------------------------------------------------------
# mk_imsg/mk_omsg
#-------------------------------------------------------------------------

# Make input message, truncate ints to ensure they fit in 32 bits.

def mk_imsg( query, database, hit_pos, addr_q, addr_d, addr_len, addr_score ):
  return concat(
    Bits32(addr_score, trunc_int=True), Bits32(addr_len, trunc_int=True), Bits32(addr_d, trunc_int=True), 
    Bits32(addr_q, trunc_int=True), Bits32(hit_pos, trunc_int=True), 
    Bits32(database, trunc_int=True), Bits32(query, trunc_int=True)
  )

def mk_omsg( score, length, q_start, d_start, addr_q, addr_d, addr_len, addr_score ):
  return concat(
    Bits32(addr_score, trunc_int=True), Bits32(addr_len, trunc_int=True), 
    Bits32(addr_d, trunc_int=True), Bits32(addr_q, trunc_int=True),
    Bits32(d_start, trunc_int=True), Bits32(q_start, trunc_int=True), 
    Bits32(length, trunc_int=True), Bits32(score, trunc_int=True)
  )


#----------------------------------------------------------------------
# Data Set: random
#----------------------------------------------------------------------
from project.test.UGPEFL_test import random_tests
from project.test.UGPEFL_test import basic_tests

#-------------------------------------------------------------------------
# Command line processing
#-------------------------------------------------------------------------

class ArgumentParserWithCustomError(argparse.ArgumentParser):
  def error( self, msg = "" ):
    if ( msg ): print("\n ERROR: %s" % msg)
    print("")
    file = open( sys.argv[0] )
    for ( lineno, line ) in enumerate( file ):
      if ( line[0] != '#' ): sys.exit(msg != "")
      if ( (lineno == 2) or (lineno >= 4) ): print( line[1:].rstrip("\n") )

def parse_cmdline():
    p = ArgumentParserWithCustomError( add_help=False )
    p.add_argument( "-h", "--help",    action="store_true" )
    p.add_argument("--impl", default="fl", choices=["fl", "rtl"])
    p.add_argument( "--input", default="basic", choices=["basic","random"] )
    # p.add_argument( "--input", default="random", choices=["random"] )
    p.add_argument( "--trace",     action="store_true" )
    p.add_argument( "--stats",     action="store_true" )
    p.add_argument( "--translate", action="store_true" )
    p.add_argument( "--dump-vcd",  action="store_true" )
    p.add_argument( "--dump-vtb",  action="store_true" )

    opts = p.parse_args()
    if opts.help: p.error()
    return opts

#-------------------------------------------------------------------------
# Main 
#-------------------------------------------------------------------------

def main():
    opts = parse_cmdline()

    # Create the input pattern
    inputs  = None
    if   opts.input == "basic":    inputs = basic_tests
    elif opts.input == "random":    inputs = random_tests

    ninputs = len(inputs[::2])
    
    # Determine which model to use in the simulator
    model_impl_dict = {
        "fl"     : UGPEFL,
        "rtl"    : UGPE,
    }

    # Check if translation is valid
    if opts.translate and opts.impl.startswith("fl"):
        print("\n ERROR: --translate only works with RTL models \n")
        exit(1)

    # Create test harness (we can reuse the harness from unit testing)

    th = TestHarness( model_impl_dict[ opts.impl ]() )

    th.set_param( "top.src.construct",  msgs=inputs[::2]  )
    th.set_param( "top.sink.construct", msgs=inputs[1::2] )
    
    # Create VCD filename

    unique_name = f"ugpe-{opts.impl}-{opts.input}"

    cmdline_opts = {
        'dump_vcd': f"{unique_name}" if opts.dump_vcd else '',
        'dump_vtb': f"{unique_name}" if opts.dump_vtb else '',
        'test_verilog': 'zeros' if opts.translate else '',
    }

    # Configure the test harness component

    config_model_with_cmdline_opts( th, cmdline_opts, duts=['ugpe'] )
    
    # Apply necessary passes

    th.apply( DefaultPassGroup( linetrace=opts.trace ) )

    # Reset test harness

    th.sim_reset()

    # Run simulation

    while not th.done():
        th.sim_tick()
    # Extra ticks to make VCD easier to read

    th.sim_tick()
    th.sim_tick()
    th.sim_tick()

    # Display statistics

    if opts.stats:
        print( f"num_cycles         = {th.sim_cycle_count()}" )
        print( f"num_cycles_per_extend = {th.sim_cycle_count()/(1.0*ninputs):1.2f}" )

main()
