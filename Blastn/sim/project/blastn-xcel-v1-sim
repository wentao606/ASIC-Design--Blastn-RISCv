#!/usr/bin/env python
#=========================================================================
# ugpe-sim
#=========================================================================
#
#  -h --help           Display this message
#
#  --impl              {fl,rtl}
#  --input dataset     {basic, random}
#  --trace             Display line tracing
#  --stats             Display statistics
#  --dump-vcd          Dump VCD to imul-<impl>-<input>.vcd
#  --dump-vtb          Dump a Verilog test harness
#
# Author : Christopher Batten, Shunning Jiang
# Date   : February 5, 2015
#

# Hack to add project root to python path
import os
import sys 
import argparse
import re

sim_dir = os.path.dirname( os.path.abspath( __file__ ) )
while sim_dir:
  if os.path.exists( sim_dir + os.path.sep + "pymtl.ini" ):
    sys.path.insert(0,sim_dir)
    break
  sim_dir = os.path.dirname(sim_dir)

from random import randint, seed

seed(0xdeadbeef)

from pymtl3 import *
from pymtl3.stdlib.test_utils import config_model_with_cmdline_opts
from pymtl3.passes.backends.verilog import VerilogPlaceholderPass
from pymtl3.stdlib.xcel       import XcelMsgType, mk_xcel_msg


from project.BlastnXcelFL_v1     import BlastnXcelFL_v1
from project.BlastnXcel_v1      import BlastnXcel_v1

from project.test.BlastnXcel_v1_test import TestHarness
from project.test.BlastnXcelFL_v1_test import full_random, basic_test
from project.test.BlastnXcelFL_v1_test import part_mid_match_from_start,part_mid_match_from_mid,part_mid_match_from_end
from project.test.BlastnXcelFL_v1_test import part_start_match_from_start,part_start_match_from_mid,part_start_match_from_end
from project.test.BlastnXcelFL_v1_test import all_mismatch_start,all_mismatch_mid,all_mismatch_edge
from project.test.BlastnXcelFL_v1_test import all_match_start,all_match_mid,all_match_edge
from project.BlastnXcelFL_v1 import blastn_xcel


#-------------------------------------------------------------------------
# Command line processing
#-------------------------------------------------------------------------

class ArgumentParserWithCustomError(argparse.ArgumentParser):
  def error( self, msg = "" ):
    if ( msg ): print("\n ERROR: %s" % msg)
    print("")
    file = open( sys.argv[0] )
    for ( lineno, line ) in enumerate( file ):
      if ( line[0] != '#' ): sys.exit(msg != "")
      if ( (lineno == 2) or (lineno >= 4) ): print( line[1:].rstrip("\n") )

def parse_cmdline():
    p = ArgumentParserWithCustomError( add_help=False )
    p.add_argument( "-h", "--help",    action="store_true" )
    p.add_argument("--impl", default="fl", choices=["fl", "rtl"])
    p.add_argument( "--input", default="basic",     choices=[
      "basic",
      "full_random",
      "part_mid_match_from_start",
      "part_mid_match_from_mid",
      "part_mid_match_from_end",
      "part_start_match_from_start",
      "part_start_match_from_mid",
      "part_start_match_from_end",
      "all_mismatch_start",
      "all_mismatch_mid",
      "all_mismatch_edge",
      "all_match_start",
      "all_match_mid",
      "all_match_edge"
    ] )
    p.add_argument( "--trace",     action="store_true" )
    p.add_argument( "--stats",     action="store_true" )
    p.add_argument( "--translate", action="store_true" )
    p.add_argument( "--dump-vcd",  action="store_true" )
    p.add_argument( "--dump-vtb",  action="store_true" )

    opts = p.parse_args()
    if opts.help: p.error()
    return opts

XcelReqMsg, XcelRespMsg = mk_xcel_msg( 5, 32 )

def xreq( type_, raddr, data ):
  if type_ == 'rd':
    return XcelReqMsg( XcelMsgType.READ, raddr, data )
  else:
    return XcelReqMsg( XcelMsgType.WRITE, raddr, data )

def xresp( type_, data ):
  if type_ == 'rd':
    return XcelRespMsg( XcelMsgType.READ, data )
  else:
    return XcelRespMsg( XcelMsgType.WRITE, data )

def gen_xcel_protocol_msgs(query, database, q_start, d_start,
                           score_exp, length_exp, q_start_exp, d_start_exp):

  return [
    # Write input
    xreq('wr', 1, query),      xresp('wr', 0),
    xreq('wr', 2, database),   xresp('wr', 0),
    xreq('wr', 3, q_start),    xresp('wr', 0),
    xreq('wr', 4, d_start),    xresp('wr', 0),
    xreq('wr', 0, 0),          xresp('wr', 0),

    # Read output with expected values
    xreq('rd', 1, 0),          xresp('rd', score_exp),
    xreq('rd', 2, 0),          xresp('rd', length_exp),
    xreq('rd', 3, 0),          xresp('rd', q_start_exp),
    xreq('rd', 4, 0),          xresp('rd', d_start_exp),
    xreq('rd', 0, 0), xresp('rd', 1)
  ]

#-------------------------------------------------------------------------
# Main 
#-------------------------------------------------------------------------

def main():
    opts = parse_cmdline()

    # Create the input pattern
    inputs  = None
    if   opts.input == "basic":                         inputs = basic_test
    elif opts.input == "full_random":                   inputs = full_random
    elif opts.input == "part_mid_match_from_start":     inputs = part_mid_match_from_start
    elif opts.input == "part_mid_match_from_mid":       inputs = part_mid_match_from_mid
    elif opts.input == "part_mid_match_from_end":       inputs = part_mid_match_from_end
    elif opts.input == "part_start_match_from_start":   inputs = part_start_match_from_start
    elif opts.input == "part_start_match_from_mid":     inputs = part_start_match_from_mid
    elif opts.input == "part_start_match_from_end":     inputs = part_start_match_from_end
    elif opts.input == "all_mismatch_start":            inputs = all_mismatch_start
    elif opts.input == "all_mismatch_mid":              inputs = all_mismatch_mid
    elif opts.input == "all_mismatch_edge":              inputs = all_mismatch_edge
    elif opts.input == "all_match_start":               inputs = all_match_start 
    elif opts.input == "all_match_mid":                 inputs = all_match_mid    
    elif opts.input == "all_match_edge":                inputs = all_match_edge 

    ninputs = len(inputs[::2])
    
    # Determine which model to use in the simulator
    model_impl_dict = {
        "fl"     : BlastnXcelFL_v1,
        "rtl"    : BlastnXcel_v1,
    }

    # Check if translation is valid
    if opts.translate and opts.impl.startswith("fl"):
        print("\n ERROR: --translate only works with RTL models \n")
        exit(1)

    # Create test harness (we can reuse the harness from unit testing)

    th = TestHarness( model_impl_dict[ opts.impl ]() )

    # Unpack 32-bit packed DNA sequences into 2-bit arrays
    query_arr    = [ (inputs[0] >> (2*i)) & 0x3 for i in range(16) ]
    database_arr = [ (inputs[1] >> (2*i)) & 0x3 for i in range(16) ]
    code_to_base = ['A', 'C', 'G', 'T']
    # decoded_seq = ''.join(code_to_base[code] for code in reversed(query_arr))
    # print("query:{}".format(decoded_seq))
    # decoded_seq = ''.join(code_to_base[code] for code in reversed(database_arr))
    # print("db:   {}".format(decoded_seq))
    # Compute golden reference
    score_exp, length_exp, q_start_exp, d_start_exp = blastn_xcel(
        query_arr, database_arr, inputs[2], inputs[3]
    )

    # Generate messages using dynamically computed results
    xcel_protocol_msgs = gen_xcel_protocol_msgs(
        inputs[0], inputs[1],
        inputs[2], inputs[3],
        score_exp, length_exp, q_start_exp, d_start_exp
    )

    th.set_param( "top.src.construct",  msgs=xcel_protocol_msgs[::2]  )
    th.set_param( "top.sink.construct", msgs=xcel_protocol_msgs[1::2] )
    
    # Create VCD filename

    unique_name = f"xcel-{opts.impl}-{opts.input}"

    cmdline_opts = {
        'dump_vcd': f"{unique_name}" if opts.dump_vcd else '',
        'dump_vtb': f"{unique_name}" if opts.dump_vtb else '',
        'test_verilog': 'zeros' if opts.translate else '',
    }

    # Configure the test harness component

    config_model_with_cmdline_opts( th, cmdline_opts, duts=['xcel'] )
    
    # Apply necessary passes

    th.apply( DefaultPassGroup( linetrace=opts.trace ) )

    # Reset test harness

    th.sim_reset()

    # Run simulation

    while not th.done():
        th.sim_tick()
    # Extra ticks to make VCD easier to read

    th.sim_tick()
    th.sim_tick()
    th.sim_tick()

    # Display statistics

    if opts.stats:
        print( f"num_cycles         = {th.sim_cycle_count()}" )
        # print( f"num_cycles_per_extend = {th.sim_cycle_count()/(1.0*ninputs):1.2f}" )
      # Extract results
    # responses = [ msg for msg in th.sink.msgs if msg.type_ == XcelMsgType.READ ]
    # score_out, length_out, q_start_out, d_start_out, done = [ r.data for r in responses ]
    # print("score:{} len:{} q_start:{} d_start:{}".format(score_out, length_out, q_start_out, d_start_out))

main()
