#!/usr/bin/env python
#=========================================================================
# vvadd-xcel-sim [options]
#=========================================================================
#
#  -h --help           Display this message
#
#  --impl              {fl,rtl}
#  --input <dataset>   {small, large, multiple}
#  --trace             Display line tracing
#  --stats             Display statistics
#  --translate         Translate RTL model to Verilog
#  --dump-vcd          Dump VCD to vvadd-xcel-<impl>-<input>.vcd
#  --dump-vtb          Dump a SystemVerilog test harness
#
# Author : Christopher Batten
# Date   : March 16, 2015
#

# Hack to add project root to python path

import os
import sys

sim_dir = os.path.dirname( os.path.abspath( __file__ ) )
while sim_dir:
  if os.path.exists( sim_dir + os.path.sep + "pymtl.ini" ):
    sys.path.insert(0,sim_dir)
    break
  sim_dir = os.path.dirname(sim_dir)

import argparse
import re
import struct

from pymtl3 import *
from pymtl3.stdlib.test_utils import config_model_with_cmdline_opts
from pymtl3.passes.backends.verilog import VerilogPlaceholderPass

from tut9_xcel.VvaddXcelFL import VvaddXcelFL
from tut9_xcel.VvaddXcel   import VvaddXcel

from tut9_xcel.test.VvaddXcelFL_test import TestHarness, gen_xcel_protocol_msgs
from tut9_xcel.test.VvaddXcelFL_test import small_data, large_data, multiple

#-------------------------------------------------------------------------
# Command line processing
#-------------------------------------------------------------------------

class ArgumentParserWithCustomError(argparse.ArgumentParser):
  def error( self, msg = "" ):
    if ( msg ): print("\n ERROR: %s" % msg)
    print("")
    file = open( sys.argv[0] )
    for ( lineno, line ) in enumerate( file ):
      if ( line[0] != '#' ): sys.exit(msg != "")
      if ( (lineno == 2) or (lineno >= 4) ): print( line[1:].rstrip("\n") )

def parse_cmdline():
  p = ArgumentParserWithCustomError( add_help=False )

  # Standard command line arguments

  p.add_argument( "-h", "--help",    action="store_true" )

  # Additional commane line arguments for the simulator

  p.add_argument( "--impl", default="fl", choices=["fl","rtl"] )

  p.add_argument( "--input", default="small",
    choices=["small","large","multiple"] )

  p.add_argument( "--trace",     action="store_true" )
  p.add_argument( "--stats",     action="store_true" )
  p.add_argument( "--translate", action="store_true" )
  p.add_argument( "--dump-vcd",  action="store_true" )
  p.add_argument( "--dump-vtb",  action="store_true" )

  opts = p.parse_args()
  if opts.help: p.error()
  return opts

#-------------------------------------------------------------------------
# Main
#-------------------------------------------------------------------------

def main():
  try:
    import pypyjit
    pypyjit.set_param("off")
  except:
    pass

  opts = parse_cmdline()

  # Create the input pattern

  data = None

  if   opts.input == "small":    data = small_data
  elif opts.input == "large":    data = large_data
  elif opts.input == "multiple": data = multiple

  ninputs = len(data[::2])

  # Determine which model to use in the simulator

  XcelType = VvaddXcelFL
  if opts.impl == "rtl":
    XcelType = VvaddXcel

  # Check if translation is valid

  if opts.translate and not opts.impl.startswith("rtl"):
    print("\n ERROR: --translate only works with RTL models \n")
    exit(1)

  # Create VCD filename

  if opts.dump_vcd:
    vcd_file_name = f"vvadd-xcel-{opts.impl}-{opts.input}"
  else:
    vcd_file_name = ""

  # Convert test data into byte array

  data_src0 = data[::2]
  data_src1 = data[1::2]
  src0_bytes = [0]*len(data_src0)
  src1_bytes = [0]*len(data_src1)
  for i in range( len(data_src0) ):
    src0_bytes[i] = struct.pack("<{}I".format(len(data_src0[i])),*data_src0[i])
    src1_bytes[i] = struct.pack("<{}I".format(len(data_src1[i])),*data_src1[i])

  # Protocol messages
  xcel_protocol_msgs = []
  for i in range( len(data_src0) ):
    xcel_protocol_msgs = xcel_protocol_msgs + gen_xcel_protocol_msgs( len(data_src0[i]), i)

  # Create test harness (we can reuse the harness from unit testing)

  th = TestHarness( XcelType() )

  # Load the data

  th.set_param("top.src.construct",  msgs=xcel_protocol_msgs[::2] )
  th.set_param("top.sink.construct", msgs=xcel_protocol_msgs[1::2] )

  # Create VCD filename

  unique_name = f"vvadd-xcel-{opts.impl}-{opts.input}"

  cmdline_opts = {
    'dump_vcd': f"{unique_name}" if opts.dump_vcd else '',
    'dump_vtb': f"{unique_name}" if opts.dump_vtb else '',
    'test_verilog': 'zeros' if opts.translate else '',
  }

  # Configure the test harness component

  config_model_with_cmdline_opts( th, cmdline_opts, duts=['xcel'] )

  # Load the data into the test memory

  for i in range( len(data_src0) ):
    th.mem.write_mem( 0x1000 + 0x3000*i, src0_bytes[i] )
    th.mem.write_mem( 0x2000 + 0x3000*i, src1_bytes[i] )

  # Apply necessary passes

  th.apply( DefaultPassGroup( linetrace=opts.trace ) )

  # Reset test harness

  th.sim_reset()

  # Run simulation

  while not th.done():
    th.sim_tick()

  # Extra ticks to make VCD easier to read

  th.sim_tick()
  th.sim_tick()
  th.sim_tick()

  # Retrieve data from test memory

  result_bytes = [0]*len(data_src0)
  for i in range( len(data_src0) ):
    result_bytes[i] = th.mem.read_mem( 0x3000+ 0x3000*i, len(src0_bytes[i]) )

  for i in range( len(result_bytes) ):

    # Convert result bytes into list of ints
    result = list(struct.unpack("<{}I".format(len(data_src0[i])),result_bytes[i]))

    # Compare result
    for j in range( len(result) ):
      assert result[j] == data_src0[i][j] + data_src1[i][j]

  # Display statistics

  if opts.stats:
    print( f"num_cycles = {th.sim_cycle_count()}" )

main()
