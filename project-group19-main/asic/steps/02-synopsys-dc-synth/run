#!/usr/bin/env bash
#=========================================================================
# 02-synopsys-dc-synth
#=========================================================================

# Stop on error and echo all commands

set -e
trap 'echo "CMD: $BASH_COMMAND"' DEBUG

# Determine RUNDIR

RUNDIR="$(dirname $(readlink -f "${BASH_SOURCE[0]}"))"
cd $RUNDIR

#-------------------------------------------------------------------------
# alib
#-------------------------------------------------------------------------
# Design Compiler caches analyzed libraries to improve performance using
# ".alib" directories. The alib takes a while to generate but is reused on
# subsequent runs. It is useful to store a centralized copy of the alib to
# avoid re-generating the alib (usually only several minutes but can be
# annoying) on every new clone of the ASIC repo.
#
# However, if DC sees a .db that does not have an associated .alib it will
# try to automatically create one. This is not usually a problem when
# students just use standard cells, but if a student is trying to use
# SRAMs, then they will be using new .db files that DC has not seen yet.
# The problem is that students do not have write permissions to the
# centralized copy of the alib in the ADK.
#
# The solution we use is to create a local alib directory in the current
# build directory with _per-file_ symlinks to the centralized alib (and
# with the same directory hierarchy). This allows students to reuse the
# centralized copies of the alib files while allowing new alibs (e.g., for
# SRAMs) to be generated locally.
#
# This is possible because the alibs are stored in a directory that holds
# a ".db.alib" file for each db file:
#
# - alib
#   - alib-52
#     - iocells.db.alib
#     - stdcells.db.alib
#
# This new alib directory just needs to contain symlinks to each saved
# alib in the ADK. This can be done simply by using "cp -srf" of the ADK
# alib to the build directory, which generates symbolic links to each file
# instead of copying. This way, the student can access the master copy of
# the saved alibs in the ADK, and if there are any additional db's
# specified, their alibs will be saved in the local build directory.

rm -rf alib
mkdir -p alib
cp -srf $ECE6745_STDCELLS/stdcells.alib/* alib

#-------------------------------------------------------------------------
# Run using run.tcl script
#-------------------------------------------------------------------------

dc_shell-xg-t -f run.tcl | tee run.log

